//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebClient.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataProviders", Namespace="http://schemas.datacontract.org/2004/07/%D0%9A%D0%A0_8")]
    [System.SerializableAttribute()]
    public partial class DataProviders : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProviderField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Provider {
            get {
                return this.ProviderField;
            }
            set {
                if ((object.ReferenceEquals(this.ProviderField, value) != true)) {
                    this.ProviderField = value;
                    this.RaisePropertyChanged("Provider");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataInvoices", Namespace="http://schemas.datacontract.org/2004/07/%D0%9A%D0%A0_8")]
    [System.SerializableAttribute()]
    public partial class DataInvoices : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Provider_idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SumField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string Date {
            get {
                return this.DateField;
            }
            set {
                if ((object.ReferenceEquals(this.DateField, value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string Provider_id {
            get {
                return this.Provider_idField;
            }
            set {
                if ((object.ReferenceEquals(this.Provider_idField, value) != true)) {
                    this.Provider_idField = value;
                    this.RaisePropertyChanged("Provider_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string Sum {
            get {
                return this.SumField;
            }
            set {
                if ((object.ReferenceEquals(this.SumField, value) != true)) {
                    this.SumField = value;
                    this.RaisePropertyChanged("Sum");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetProviders", ReplyAction="http://tempuri.org/IService/GetProvidersResponse")]
        WebClient.ServiceReference.DataProviders[] GetProviders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetProviders", ReplyAction="http://tempuri.org/IService/GetProvidersResponse")]
        System.Threading.Tasks.Task<WebClient.ServiceReference.DataProviders[]> GetProvidersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetInvoices", ReplyAction="http://tempuri.org/IService/GetInvoicesResponse")]
        WebClient.ServiceReference.DataInvoices[] GetInvoices();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetInvoices", ReplyAction="http://tempuri.org/IService/GetInvoicesResponse")]
        System.Threading.Tasks.Task<WebClient.ServiceReference.DataInvoices[]> GetInvoicesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Providers", ReplyAction="http://tempuri.org/IService/ProvidersResponse")]
        System.Collections.Generic.Dictionary<int, string> Providers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Providers", ReplyAction="http://tempuri.org/IService/ProvidersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> ProvidersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/NewProvider", ReplyAction="http://tempuri.org/IService/NewProviderResponse")]
        void NewProvider(string provider_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/NewProvider", ReplyAction="http://tempuri.org/IService/NewProviderResponse")]
        System.Threading.Tasks.Task NewProviderAsync(string provider_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/NewInvoice", ReplyAction="http://tempuri.org/IService/NewInvoiceResponse")]
        void NewInvoice(System.DateTime date, int provider_id, int summary);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/NewInvoice", ReplyAction="http://tempuri.org/IService/NewInvoiceResponse")]
        System.Threading.Tasks.Task NewInvoiceAsync(System.DateTime date, int provider_id, int summary);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : WebClient.ServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<WebClient.ServiceReference.IService>, WebClient.ServiceReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WebClient.ServiceReference.DataProviders[] GetProviders() {
            return base.Channel.GetProviders();
        }
        
        public System.Threading.Tasks.Task<WebClient.ServiceReference.DataProviders[]> GetProvidersAsync() {
            return base.Channel.GetProvidersAsync();
        }
        
        public WebClient.ServiceReference.DataInvoices[] GetInvoices() {
            return base.Channel.GetInvoices();
        }
        
        public System.Threading.Tasks.Task<WebClient.ServiceReference.DataInvoices[]> GetInvoicesAsync() {
            return base.Channel.GetInvoicesAsync();
        }
        
        public System.Collections.Generic.Dictionary<int, string> Providers() {
            return base.Channel.Providers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> ProvidersAsync() {
            return base.Channel.ProvidersAsync();
        }
        
        public void NewProvider(string provider_name) {
            base.Channel.NewProvider(provider_name);
        }
        
        public System.Threading.Tasks.Task NewProviderAsync(string provider_name) {
            return base.Channel.NewProviderAsync(provider_name);
        }
        
        public void NewInvoice(System.DateTime date, int provider_id, int summary) {
            base.Channel.NewInvoice(date, provider_id, summary);
        }
        
        public System.Threading.Tasks.Task NewInvoiceAsync(System.DateTime date, int provider_id, int summary) {
            return base.Channel.NewInvoiceAsync(date, provider_id, summary);
        }
    }
}
